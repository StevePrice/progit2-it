=== Controllo di versione

(((version control)))
Cos'è il controllo di versione, e perché dovresti usarlo?
Il controllo di versione è un sistema che registra, nel tempo, i cambiamenti ad un file o ad una serie di file, così da poter richiamare in qualsiasi momento una specifica versione.
Per gli esempi in questo libro useremo i file di un codice sorgente di un software per controllarne la versione, ma a tutti gli effetti potrai usare pressoché qualsiasi file del computer.

Se sei un grafico o un webdesigner e vuoi tenere tutte le versioni di un'immagine o di un layout (e sicuramente vuoi farlo) è davvero saggio usare un sistema di gestione delle versioni (*_VCS_* - _Version Control System_ in inglese)
Ti permette di ripristinare lo stato precedente dei file, ripristinare l'intero progetto a uno stato precedente, confrontare le modifiche avvenute nel tempo, vedere chi è stato l'ultimo a cambiare qualcosa che può ver causato un problema, cos'ha cambiato, quando e molto altro.
Usare un VCS significa anche che se combini un pasticcio o perdi qualche file, puoi facilmente recuperare la situazione.
E tutto ciò lo ottieni senza nessuno sforzo.

==== Sistemi di gestione delle versioni

(((version control,local)))
Molte persone gestiscono le diverse versioni copiando i file in un'altra directory (magari una directory denominata con data e ora, se sono furbi).
Questo approccio è molto comune perché è molto semplice, ma è anche incredibilmente soggetto a molti errori.
É facile dimenticare in quale directory sia e modificare il file sbagliato o copiare dei file che non intendevi copiare.

Per risolvere questo problema i programmatori, tempo fa, svilupparono VCS locali che avevano un database semplice che memorizzava tutti i cambiamenti dei file controllati.

.Gestione locale delle versioni.
image::images/local.png[Diagramma della gestione locale delle versioni]

Uno dei VCS più diffuso era un sistema chiamato RCS, che è tuttora presente nel software di molti computer.
Anche in OS X, il popolare sistema operativo per Mac, trovi il comando rcs quando installi gli strumenti di sviluppo.
RCS salva su disco, in un formato particolare, le differenze tra le varie versioni di un file (in inglese _patch_). Così può ricreare lo stato di qualsiasi file in qualsiasi momento aggiungendo una a una le singole modifiche.

==== Centralized Version Control Systems

(((version control,centralized)))
The next major issue that people encounter is that they need to collaborate with developers on other systems.
To deal with this problem, Centralized Version Control Systems (CVCSs) were developed.
These systems, such as CVS, Subversion, and Perforce, have a single server that contains all the versioned files, and a number of clients that check out files from that central place. (((CVS)))(((Subversion)))(((Perforce)))
For many years, this has been the standard for version control.

.Centralized version control.
image::images/centralized.png[Centralized version control diagram]

This setup offers many advantages, especially over local VCSs.
For example, everyone knows to a certain degree what everyone else on the project is doing.
Administrators have fine-grained control over who can do what; and it's far easier to administer a CVCS than it is to deal with local databases on every client.

However, this setup also has some serious downsides.
The most obvious is the single point of failure that the centralized server represents.
If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on.
If the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything – the entire history of the project except whatever single snapshots people happen to have on their local machines.
Local VCS systems suffer from this same problem – whenever you have the entire history of the project in a single place, you risk losing everything.

==== Distributed Version Control Systems

(((version control,distributed)))
This is where Distributed Version Control Systems (DVCSs) step in.
In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don't just check out the latest snapshot of the files: they fully mirror the repository.
Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to restore it.
Every checkout is really a full backup of all the data.

.Distributed version control.
image::images/distributed.png[Distributed version control diagram]

Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.
This allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.
