=== Controllo di versione

(((version control)))
Cos'è il controllo di versione, e perché dovresti usarlo?
Il controllo di versione è un sistema che registra, nel tempo, i cambiamenti ad un file o ad una serie di file, così da poter richiamare in qualsiasi momento una specifica versione.
Per gli esempi in questo libro useremo i file di un codice sorgente di un software per controllarne la versione, ma a tutti gli effetti potrai usare pressoché qualsiasi file del computer.

Se sei un grafico o un webdesigner e vuoi tenere tutte le versioni di un'immagine o di un layout (e sicuramente vuoi farlo) è davvero saggio usare un sistema di gestione delle versioni (*_VCS_* - _Version Control System_ in inglese)
Ti permette di ripristinare lo stato precedente dei file, ripristinare l'intero progetto a uno stato precedente, confrontare le modifiche avvenute nel tempo, vedere chi è stato l'ultimo a cambiare qualcosa che può ver causato un problema, cos'ha cambiato, quando e molto altro.
Usare un VCS significa anche che se combini un pasticcio o perdi qualche file, puoi facilmente recuperare la situazione.
E tutto ciò lo ottieni senza nessuno sforzo.

==== Sistemi di gestione delle versioni

(((version control,local)))
Molte persone gestiscono le diverse versioni copiando i file in un'altra directory (magari una directory denominata con data e ora, se sono furbi).
Questo approccio è molto comune perché è molto semplice, ma è anche incredibilmente soggetto a molti errori.
É facile dimenticare in quale directory sia e modificare il file sbagliato o copiare dei file che non intendevi copiare.

Per risolvere questo problema i programmatori, tempo fa, svilupparono VCS locali che avevano un database semplice che memorizzava tutti i cambiamenti dei file controllati.

.Gestione locale delle versioni.
image::images/local.png[Diagramma della gestione locale delle versioni]

Uno dei VCS più diffuso era un sistema chiamato RCS, che è tuttora presente nel software di molti computer.
Anche in OS X, il popolare sistema operativo per Mac, trovi il comando rcs quando installi gli strumenti di sviluppo.
RCS salva su disco, in un formato particolare, le differenze tra le varie versioni di un file (in inglese _patch_). Così può ricreare lo stato di qualsiasi file in qualsiasi momento aggiungendo una a una le singole modifiche.

==== Sistemi centralizzati di gestione delle versioni

(((version control,centralized)))
Un altro grande problema sorge quando bisogna collaborare con altre persone su sistemi diversi.
E per risolvere questo problema furono sviluppati i sistemi centralizzati di gestione delle versioni (*_CVCS_* - _Centralized Version Control Systems_ in inglese).
Questi sistemi, come CVS, Subversion e Perforce, hanno un unico server che memorizza tutti i file controllati (anche detti, colloquialmente, _versionati_) e i vari utenti che scaricano i file da questo server centrale. (((CVS)))(((Subversion)))(((Perforce)))
Questo è stato lo standard per la gestione delle versioni per molti anni.

.Gestione centralizzata delle versioni.
image::images/centralized.png[Diagramma della gestione centralizzata delle versioni]

Questa configurazione offre molti vantaggi, specialmente rispetto ai VCS locali.
In questo modo, per esempio, tutti sanno più o meno cosa stanno facendo gli altri che lavorano al progetto.
Gli amministratori hanno un controllo preciso su chi può fare cosa, ed è molto più facile amministrare un CVCS che un database locale su ogni computer.

Questa configurazione ha tuttavia alcuni svantaggi importanti.
Il più ovvio è rappresentato dal server centralizzato, che è il punto vulnerabile del sistema (_single point of failure_ in inglese).
Se il serve non è più raggiungibile per un'ora, in quell'ora non è possibile collaborare con nessuno né salvare una qualsiasi modifica su cui tu stia lavorando.
Se il disco rigido del database centrale si rompe, e non è disponibile una copia di sicurezza (_backups_), hai perso tutto: tutta la storia del progetto è persa, ad eccezione delle singole istantanee che le varie persone hanno sui loro computer.
Anche con i VCS locali si corre lo stesso rischio: ogni volta che tutta la storia del progetto è in un unico posto, rischia di perdere tutto.

==== Distributed Version Control Systems

(((version control,distributed)))
This is where Distributed Version Control Systems (DVCSs) step in.
In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don't just check out the latest snapshot of the files: they fully mirror the repository.
Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to restore it.
Every checkout is really a full backup of all the data.

.Distributed version control.
image::images/distributed.png[Distributed version control diagram]

Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.
This allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.
